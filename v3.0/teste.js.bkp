const $ = tag => document.getElementById(tag);

let dadoEscalasJson = [];
let dadoFaltasJson = [];
let dadoInscritosJson = [];
let conf = [];

window.onload = function(){
    $('fileArquivo').addEventListener('change', (e)=>{
        e.preventDefault();
        if($('fileArquivo').files.length > 0){
            $readFile($('fileArquivo'));
        }
    })
    inicializarEventos();
}

const $readFile = (input) => {
    try {
        let file = input.files[0];
        let reader = new FileReader();
        reader.readAsText(file);
        reader.onload = function () {avaliarDadoBruto({htmlRetornado:reader.result})};
        reader.onerror = function () {console.log(reader.error)};
    } catch (error) {
        console.log(error);
    }
}

function avaliarDadoBruto({htmlRetornado}) {
    try {
        if(htmlRetornado === null){return}
        
        const parser = new DOMParser()
        let dadoBruto = parser.parseFromString(htmlRetornado, 'text/html')
        let funcaoAuxiliar = false
        
        const tipoRetorno = _testarArquivoDeOrigem(dadoBruto)
        if( tipoRetorno === false ){return}
        if( tipoRetorno === 'Escalas' ){
            dadoBruto = dadoBruto.querySelector(".table_relatorio")
            dadoBruto = dadoBruto.children[0]
            dadoEscalasJson = prepararEscalasJSon(dadoBruto)
            $info({msg:`Escala de`,opt:`+n`})
            $info({msg:`${dadoEscalasJson[0]["MÊS"]}/${dadoEscalasJson[0].DATA.split('/')[2]}, gerenciadas: ${Intl.NumberFormat('pr-BR', { maximumSignificantDigits: 5 }).format(dadoEscalasJson.length)} cotas`, opt:'+'})
            conf.arquivo = `${dadoEscalasJson[0].DATA.split('/')[2]}-${dadoEscalasJson[0].DATA.split('/')[1]}-${dadoEscalasJson[0]["MÊS"]}`
            conf.mesAno = `${dadoEscalasJson[0]["MÊS"]}/${dadoEscalasJson[0].DATA.split('/')[2]}`
            funcaoAuxiliar = inicializarInterfaceDeEscalas
        }
        if( tipoRetorno === 'Faltas' ){
            dadoBruto = dadoBruto.querySelector(".div_form_faltas")
            dadoBruto = dadoBruto.children[0].children[0]
            dadoFaltasJson = prepararFaltasJSon(dadoBruto)
            $info({msg:`Faltas de`,opt:`+n`})
            $info({msg:`${_extrairMesExtenso(dadoFaltasJson[0].DATA)}/${dadoFaltasJson[0].DATA.split('/')[2]}, retornadas: ${Intl.NumberFormat('pr-BR', { maximumSignificantDigits: 5 }).format(dadoFaltasJson.length)} faltas`, opt:'+'})
            funcaoAuxiliar = inicializarInterfaceDeFaltas
        }
        if( tipoRetorno === 'Inscritos'){
            dadoBruto = dadoBruto.querySelector(".tbResumo")
            dadoInscritosJson = prepararInscritosJSon(dadoBruto)
            $info({msg:`${dadoInscritosJson[0].MES_REFERENCIA}, retornados: ${Intl.NumberFormat('pr-BR', { maximumSignificantDigits: 5 }).format(dadoInscritosJson.length)} inscritos`, opt:'+n'})
            funcaoAuxiliar = inicializarInterfaceDeInscritos
        }
        if(funcaoAuxiliar){funcaoAuxiliar()}

        function _testarArquivoDeOrigem(dadoBruto){
            let ret = false
            if (dadoBruto.getElementsByTagName('fieldset')) {
                const or0 = Array.from(dadoBruto.getElementsByTagName('fieldset'))
                if (or0.length > 0) {
                    or0.forEach((el) => {
                        const or1 = el.children[0]
                        if (or1.innerHTML) {
                            const or2 = or1.innerHTML
                            if (or2.indexOf('Escalas') > -1) {
                                ret = 'Escalas'
                            }
                            if (or2.indexOf('Faltas') > -1) {
                                ret = 'Faltas'
                            }
                            if (or2.indexOf('Resumo da Escala') > -1) {
                                ret = 'Inscritos'
                            }
                        }
                    })
                }
            }  
            return ret
        }

    } catch (error) {
        console.log(error)
    }
}

function prepararEscalasJSon(dadosHtml) {
    try {    
        let opr = {};
        let objEscala = [];
        for (let i = 0; i < dadosHtml.childElementCount; i++){
            const tr = dadosHtml.children[i];
            const filhos = tr.childElementCount;
            if (filhos === 1) {
                const td = tr.children[0];
                if(td.colSpan === 7){
                    if(td.childElementCount === 1){
                        opr["desc_um"] = ''
                    }
                    for (let j = 0; j < td.childElementCount; j++){
                        const span = td.children[j];
                        opr[span.className] = span.innerHTML
                    }
                    const trM1 = dadosHtml.children[i+1];
                    const tdM1 = trM1.children[0];
                    if(tdM1.colSpan === 7){
                        for (let j = 0; j < tdM1.childElementCount; j++){
                            const span = tdM1.children[j];
                            opr[span.className] = span.innerHTML
                        }
                    }
                }
            }
            if (filhos === 7) {
                if (tr.children[0].nodeName === "TD") {
                    const obj = {};
                    obj['_ID'] = i;  
                    obj['POSTO_GRAD'] = `${_sanitizar(tr.children[0].innerHTML)}`; 
                    obj['NOME'] = `${_sanitizar(tr.children[1].innerHTML)}`; 
                    obj['ESCALADO'] = `${_sanitizar(tr.children[1].title)}`; 
                    obj['SIAPE'] = `${_sanitizar(tr.children[2].innerHTML)}`; 
                    obj['LOTAÇÃO'] = `${_sanitizar(tr.children[3].innerHTML)}`; 
                    obj['QUADRO'] = `${_sanitizar(tr.children[4].innerHTML)}`; 
                    obj['CIRCULO'] = `${_extrairCirculo(tr.children[4].innerHTML)}`; 
                    obj['ALA'] = `${_sanitizar(tr.children[5].innerHTML)}`; 
                    obj['GRUPO'] = _classificarGrupo(opr.name_dois); 
                    obj['GBM_DESTINO'] = _extrairGbm({ quatro: opr.name_quatro, um: opr.desc_um, grupo: obj['GRUPO'], tres: opr.name_tres });
                    obj['HORA'] = _extrairHorario(opr.name_quatro);
                    obj['LOCAL'] = _extrairLocal(opr.name_quatro);
                    obj['MÊS'] = _extrairMesExtenso(opr.name_tres);
                    obj['QUINZENA'] = _extrairQuinzena(opr.name_tres);
                    obj['DATA'] = opr.name_tres; //DATA
                    obj['ASSINATURA'] = '';
                    obj['TEMPO'] = _extrairTempo({ data: obj['DATA'], hora: obj['HORA'] });
                    obj['VALOR'] = _extrairValor(obj['TEMPO']);
                    obj['OPERAÇÃO'] = opr.name_dois; //OPERAÇÃO - TIPO
                    obj['FALTA'] = false; 
                    obj['name_um'] = opr.name_um; //OPERAÇÃO - GBM
                    obj['desc_um'] = opr.desc_um; //SUB_LOTAÇÃO_LOCAL
                    obj['name_dois'] = opr.name_dois; //OPERAÇÃO - TIPO
                    obj['name_tres'] = opr.name_tres; //DATA
                    obj['name_quatro'] = opr.name_quatro; //HORA - OPERAÇÃO - GBM
                    obj['name_cinco'] = opr.name_cinco; // CATEGORIA
                    objEscala.push(obj);
                }
            }
            if (filhos !== 1 && filhos !== 7) {
                alert('Alteração no padrão de gerenciamento.');
                break;
            }
        }

        return objEscala

    } catch (error) {
        $info({msg:`${error}`, opt:`+n`})
    }

    function _sanitizar(parametro) {
        let retorno = parametro.replace("\n", "");
        retorno = retorno.replace("&nbsp;", "").trim();
        return retorno;
    }
    function _classificarGrupo(parametro) {
        let retorno = '';
        retorno = _sanitizar(parametro);

        if (parametro.indexOf("REFORÇO") > -1) {
            retorno = "REFORÇO OPERACIONAL";
        } else if (parametro.indexOf("SEGURANÇA") > -1) {
            retorno = "SEGURANÇA NAS INSTRUÇÕES";
        } else if (parametro.indexOf("CHUVOSO") > -1) {
            retorno = "PERÍODO CHUVOSO";
        } else if (parametro.indexOf("VERDE") > -1) {
            retorno = "VERDE VIVO";
        } else if (parametro.indexOf("SABURO") > -1) {
            retorno = "SABURO ONOYAMA";
        } else if (parametro.indexOf("PARQUE NACIONAL") > -1) {
            retorno = "ÁGUA MINERAL DO PARQUE NACIONAL";
        } else if (parametro.toUpperCase().indexOf("CHUVOSO") > -1) {
            retorno = "PERÍODO CHUVOSO";
        } else if (parametro.toUpperCase().indexOf("AEDES") > -1) {
            retorno = "DENGUE";
        } else {
            retorno = "EXTRAORDINÁRIO";
        }
        return retorno;
    }
    function _extrairCirculo(parametro) {
        let retorno = '';
        aux = _sanitizar(parametro);
        if (aux.indexOf("QBMG") > -1) {
            retorno = "Praça";
        }
        if (aux.indexOf("QOBM") > -1) {
            retorno = "Oficial";
        }
        return retorno;
    }
    function _extrairGbm(parametro) {
        let retorno = parametro.quatro.split('-');
        let ano = parametro.tres.split("/");
        ano = ano[2];
        retorno = retorno[1].trim();
        
        //---Acertar GBMs de destino------------------
        if (retorno === "HRC" || retorno === "HRT" || retorno === "IHBDF") {
            retorno = "GAEPH";
        }
        if (retorno.indexOf("Parque da Cidade") > -1) {
            retorno = "GAEPH";
        }
        if (retorno.indexOf("Parque de Águas Claras") > -1) {
            retorno = "GAEPH";
        }
        if (retorno.indexOf("GAVOP") > -1) {
            retorno = "GAVOP";
        }
        if (retorno === "Parque Ecológico Saburo Onoyama") {
            retorno = "2º GBM";
        }
        if (parametro.grupo == "DENGUE"){
            if (retorno == "ABMIL"){
                retorno = "GPCIV"
            }
        }
        
        //---Acertar Operação Verde Vivo 2023---------
        if (retorno.indexOf("VERDE VIVO") > -1) {
            if(ano == "2023"){
                retorno = parametro.um;
            }
            if(ano == "2024"){
                retorno = parametro.quatro.split("-");
                retorno = retorno[2].trim();
            }
        }
        return retorno;
    }
    function _extrairHorario(parametro) {
        let retorno = parametro.split('-');
        retorno = retorno[0].replace("à ", "às ").trim();
        return retorno.toLowerCase();
    }
    function _extrairLocal(parametro){
        let retorno = parametro.split('-');
        if(retorno[retorno.length - 1] != undefined){
            retorno = retorno[retorno.length - 1].trim();
        }
        return retorno;
    }
    function _extrairQuinzena(parametro) {
        const dataDMY = parametro.split('/');
        const dia = dataDMY[0];
        const quinzena = (dia > 15 ? `2ª Quinzena` : `1ª Quinzena`);
        return quinzena;
    }
    function _extrairTempo(parametro) {
        const auxData = `${parametro.data.substr(6, 4)}-${parametro.data.substr(3, 2)}-${parametro.data.substr(0, 2)}`
        const auxHora = parametro.hora.toLowerCase()
        let vtr1 = undefined
        let retorno = ""
        if (auxHora.indexOf(' às ') > -1) {vtr1 = auxHora.split(' às ')}
        if (auxHora.indexOf(' à ') > -1) {vtr1 = auxHora.split(' à ')}
        if(Array.isArray(vtr1)){
            let ini = new Date(`${auxData}T${vtr1[0].replace('h', ':')}:00`)
            let fim = new Date(`${auxData}T${vtr1[1].replace('h', ':')}:00`)
            if (fim <= ini) {
                fim = new Date(fim.setDate(fim.getDate() + 1))
            }
            const auxTempo = (((fim - ini) / 1000) / 60) / 60
            retorno = auxTempo.toString();
        }
        return retorno
    }
    function _extrairValor(parametro) {
        return (parametro * 50).toString()
    }
}

function prepararFaltasJSon(dadosHtml) {
    let dadoFaltasJson=[]
    for (i = 0; i < dadosHtml.childElementCount; i++) {
        const obj = {}
        const tr = dadosHtml.children[i]
        if (tr.children[0].nodeName === "TD") {
            obj['OPERAÇÃO'] = `${_sanitizar(tr.children[0].innerHTML)}`
            obj['LOCAL'] = `${_sanitizar(tr.children[1].innerHTML)}`
            obj['DATA'] = `${_sanitizar(tr.children[2].innerHTML)}`
            obj['TURNO'] = `${_sanitizar(tr.children[3].innerHTML)}`
            obj['GRUPO'] = `${_sanitizar(tr.children[4].innerHTML)}`
            obj['POSTO'] = `${_sanitizar(tr.children[5].innerHTML)}`
            obj['NOME'] = `${_sanitizar(tr.children[6].innerHTML)}`
            obj['SIAPE'] = `${_sanitizar(tr.children[7].innerHTML)}`
            obj['LOTAÇÃO'] = `${_sanitizar(tr.children[8].innerHTML)}`
            obj['QUADRO'] = `${_sanitizar(tr.children[9].innerHTML)}`
            obj['ALA'] = `${_sanitizar(tr.children[10].innerHTML)}`
            obj['FALTA'] = `${_sanitizar(tr.children[11].innerHTML)}`
            dadoFaltasJson.push(obj)
        }
    }
    
    return dadoFaltasJson
        
    function _sanitizar(parametro) {
        let retorno = parametro.replace("\n", "")
        retorno = retorno.replace("&nbsp;", "").trim()
        return retorno
    }
}

function prepararInscritosJSon(info) {
    let dadoInscritosJson = []

    if(info.children[0].children[0].bgColor == "#DDD"){
        info = info.children[1]
        _versao2()
    } else {
        info = info.children[0]
        _versao1()
    }
    
    return dadoInscritosJson
    
    function _versao1(){
        let qtdColunasDias = info.children[0].children[8].colSpan
        for (i = 0; i < info.childElementCount; i++) {
            let obj = {}
            let tr = info.children[i]
            
            for (j = 0; j < tr.childElementCount; j++) {  // remover tag script para poder resgatar os cursos
                let tag = tr.children[j]
                if(tag.nodeName == "SCRIPT") {
                    tag.parentNode.removeChild(tag)
                    j = j - 1
                }
            }

            if (tr.children[0].nodeName === "TD") {
                obj['SIAPE'] = `${_sanitizar(tr.children[2].innerHTML)}`,
                obj['MES_REFERENCIA'] = `${_sanitizar(tr.children[1].innerHTML)}`,
                obj['POSTO_GRAD'] = `${_sanitizar(tr.children[3].innerHTML)}`,
                obj['NOME'] = `${_sanitizar(tr.children[4].innerHTML)}`,
                obj['LOTAÇÃO'] = `${_sanitizar(tr.children[5].innerHTML)}`,
                obj['QUADRO'] = `${_sanitizar(tr.children[6].innerHTML)}`,
                obj['ALA'] = `${_sanitizar(tr.children[7].innerHTML)}`,
                obj['CURSOS'] = `${_sanitizar(tr.children[qtdColunasDias + 9].innerHTML)}`,
                dadoInscritosJson.push(obj)
            }
        }
    }
    
    function _versao2(){
        let mes_referencia = info.parentNode.parentNode.children[1].innerHTML
        for(i = 0; i < info.childElementCount; i++){
            let obj = {}
            let separar = null
            let tr = info.children[i]

            if(tr.children[0].nodeName === "TD") {
                separar = _sanitizar(tr.children[1].innerHTML).split("<br>")
                if(separar.length > 1) {
                    obj['SIAPE'] = separar[0];
                    obj['POSTO_GRAD'] = separar[1];
                    obj['QUADRO'] = separar[2];
                    obj['NOME'] = `${_sanitizar(tr.children[2].innerHTML)}`;
                    obj['LOTAÇÃO'] = `${_sanitizar(tr.children[3].innerHTML)}`;
                    obj['ALA'] = `${_sanitizar(tr.children[4].innerHTML)}`;
                    obj['MES_REFERENCIA'] = mes_referencia;
                    obj['CURSOS'] = `${_sanitizar(tr.children[7].innerHTML)}`;
                } else {
                    obj['SIAPE'] = `${_sanitizar(tr.children[1].innerHTML)}`;
                    obj['POSTO_GRAD'] = `${_sanitizar(tr.children[2].innerHTML)}`;
                    obj['QUADRO'] = `${_sanitizar(tr.children[3].innerHTML)}`;
                    obj['NOME'] = `${_sanitizar(tr.children[4].innerHTML)}`;
                    obj['LOTAÇÃO'] = `${_sanitizar(tr.children[5].innerHTML)}`;
                    obj['ALA'] = `${_sanitizar(tr.children[6].innerHTML)}`;
                    obj['MES_REFERENCIA'] = mes_referencia;
                    obj['CURSOS'] = `${_sanitizar(tr.children[9].innerHTML)}`;
                }
                dadoInscritosJson.push(obj)
            }
        }
    }
        
    function _sanitizar(parametro) {
        let retorno = parametro.replace("\n", "")
        retorno = retorno.replace("&nbsp;", "").trim()
        return retorno
    }
}

//Eventos
const inicializarEventos = () => {
    $('selFiltroGrupo').addEventListener('change', (e)=>{
        e.preventDefault();
        const objGrupo = filtrarEscalasJson(_parametros(`grupo`));
        filtrarSelect(objGrupo);
    })
        
    $('selFiltroOperacao').addEventListener('change', (e)=>{
        e.preventDefault();
        const objOperacao = filtrarEscalasJson(_parametros(`operacao`));
        filtrarSelect(objOperacao);
    })

    $('selFiltroGbmDestino').addEventListener('change', (e)=>{
        e.preventDefault();
        const objGbmDestino = filtrarEscalasJson(_parametros(`gbm_destino`));
        filtrarSelect(objGbmDestino);
    })

    $('selFiltroTurno').addEventListener('change', (e)=>{
        e.preventDefault();
        const objTurno = filtrarEscalasJson(_parametros(`turno`));
        filtrarSelect(objTurno);
    })
}

//Funções Complementares
function $info({ msg, opt }) {
    // if(!opt){opt = ''}
    // if (txtStatus.value === ''){opt = ''}
    
    // if(opt === '+'){
    //     txtStatus.value += ` ${msg}`
    // }
    // else if (opt === ';+') {
    //     txtStatus.value += `; ${msg}`
    // }
    // else if(opt === '+n'){
    //     txtStatus.value += `\n${msg}`
    // }
    // else if(opt === '+a'){
    //     txtStatus.value += `\n${msg}`
    //     txtStatus.className = "alertar"
    //     setTimeout(()=>{ txtStatus.className='' },500)
    // }
    // else if(opt === '+a+'){
    //     txtStatus.className = "alertar"
    //     setTimeout(()=>{ txtStatus.className='' },500)
    // }
    // else {
    //     txtStatus.value = msg
    // }
    // txtStatus.scrollTop = txtStatus.scrollHeight

}

function _extrairMesExtenso(dataPtBr) {
    const dataDMY = dataPtBr.split('/');
    const mes = dataDMY[1];
    let res = '';
    if (mes === '01') { res = `Janeiro`; }
    if (mes === '02') { res = `Fevereiro`; }
    if (mes === '03') { res = `Março`; }
    if (mes === '04') { res = `Abril`; }
    if (mes === '05') { res = `Maio`; }
    if (mes === '06') { res = `Junho`; }
    if (mes === '07') { res = `Julho`; }
    if (mes === '08') { res = `Agosto`; }
    if (mes === '09') { res = `Setembro`; }
    if (mes === '10') { res = `Outubro`; }
    if (mes === '11') { res = `Novembro`; }
    if (mes === '12') { res = `Dezembro`; }
    conf.mes = mes;
    return res;
}

function totais(campoDePesquisa, obj) {
    const res = obj.reduce((acc, item) => {
        if (!acc[item[campoDePesquisa]]) 
        {
            acc[item[campoDePesquisa]] = 1
        } else 
        {
            acc[item[campoDePesquisa]] = acc[item[campoDePesquisa]] + 1
        }
        return acc
    }, {})
    return res
}

function limparTudo(){
    divResultado.innerHTML = ""; divAuxiliar.innerHTML = "";
}

function organizarGBM(a,b) {
    let n1, n2
    const x = a.split(" ")
    const y = b.split(" ")

    if(x.length > 1 && y.length > 1)
    {
        if(x[0].indexOf("º")>-1 && y[0].indexOf("º")>-1)
        {
            n1 = parseInt(x[0].substr(0, x.length))
            n2 = parseInt(y[0].substr(0, x.length))
        }
        if(x[1].indexOf("º")>-1 && y[1].indexOf("º")>-1)
        {
            n1 = parseInt(x[1].substr(0, x.length))
            n2 = parseInt(y[1].substr(0, x.length))
        }
    }
    
    if(n1 === undefined || n2 === undefined)
    {
        let i = 0
        do
        {
            n1 = a.charCodeAt(i)
            n2 = b.charCodeAt(i)
            i++
        }
        while (n1 === n2)
    }

    if(n1 < n2)
    {
        return -1
    }
    else if(n1 > n2)
    {
        return 1
    }
    else
    {
        return 0
    }
}

//Interface
function inicializarInterfaceDeEscalas(){
    limparTudo();
    inicializarSelect.Grupo(dadoEscalasJson, 'selFiltroGrupo');
    inicializarSelect.Operacao(dadoEscalasJson, 'selFiltroOperacao');
    inicializarSelect.GbmDestino(dadoEscalasJson, 'selFiltroGbmDestino');
    inicializarSelect.Turno(dadoEscalasJson, 'selFiltroTurno');
    inicializarDatas(dadoEscalasJson);
}
function inicializarInterfaceDeFaltas(){
    console.debug('');
}
function inicializarInterfaceDeInscritos(){
    console.debug('');
}

const inicializarSelect = {
    Grupo: function (arrObj, tag) {
        const arrGrupo = arrObj.map((item)=>`${item.GRUPO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
        preencherSelect($(tag), arrGrupo);
    },
    Operacao: function (arrObj, tag) {
        const arrOperacao = arrObj.map((item)=>`${item.OPERAÇÃO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
        preencherSelect($(tag), arrOperacao);
    },
    GbmDestino: function (arrObj, tag) {
        const arrGbmDestino = arrObj.map((item)=>`${item.GBM_DESTINO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
        preencherSelect($(tag), arrGbmDestino.sort(organizarGBM));
    },
    Turno: function (arrObj, tag){
        const arrTurno = arrObj.map((item)=>`${item.HORA}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
        preencherSelect($(tag), arrTurno);
    }
}

const inicializarDatas = (arrObj) => {
    const arrDatas = arrObj.map((item)=>`${item.DATA}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    if(Array.isArray(arrDatas)){$('spnDataAux').innerHTML = arrDatas[0].substr(arrDatas[0].indexOf('/'),arrDatas[0].length);}
    for(let i = 0; i < 31; i++){
        $(`btnData${("00"+(i+1)).slice(-2)}`).style.color = "#444";
    }
    arrDatas.forEach(ctr=>{
        const arrDia = ctr.split('/');
        if(Array.isArray(arrDia)){
            const dia = arrDia[0];
            $(`btnData${dia}`).style.color = "";
        }
    })
}

const filtrarSelect = (objAux) => {
    const arrGrupo = objAux.map((item)=>`${item.GRUPO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    const arrOperacao = objAux.map((item)=>`${item.OPERAÇÃO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    const arrGbmDestino = objAux.map((item)=>`${item.GBM_DESTINO}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    const arrTurno = objAux.map((item)=>`${item.HORA}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    const arrDatas = objAux.map((item)=>`${item.DATA}`).filter((elem, index, arr)=>arr.indexOf(elem) === index).sort((a, b)=>{return a.localeCompare(b)});
    _destacar(arrGrupo, $('selFiltroGrupo'));
    _destacar(arrOperacao, $('selFiltroOperacao'));
    _destacar(arrGbmDestino, $('selFiltroGbmDestino'));
    _destacar(arrTurno, $('selFiltroTurno'));
    _destacarData(arrDatas);
    $('lblGrupo').children[0].innerHTML = `Grupos: (${arrGrupo.length})`
    $('lblOperacao').children[0].innerHTML = `Operações: (${arrOperacao.length})`
    $('lblGbmDestino').children[0].innerHTML = `GBM de Destino: (${arrGbmDestino.length})`
    $('lblTurno').children[0].innerHTML = `Turnos: (${arrTurno.length})`
}

const _destacarData = (objAux) => {
    const _colecData = document.getElementsByClassName('clsData') ;
    for(let i = 0; i < _colecData.length; i++){
        const btnData = _colecData[i];
        const dia = `${btnData.id.replace('btnData', '')}${$('spnDataAux').innerHTML}`;
        if(objAux.includes(dia)){
            btnData.style.color = "";
        }else{
            btnData.style.color = "#444";
        }
    }
}

const clickNoBotaoData = (btn) => {
    if(btn.ariaPressed=="true"){btn.ariaPressed="false"}else{btn.ariaPressed="true"}
    const objData = filtrarEscalasJson(_parametros(`data`));
    filtrarSelect(objData);
}

function _destacar(arrAux, tag){
    for(let i = 0; i < tag.length; i++){
        const ctr = tag.options[i].innerHTML;
        const contagem = arrAux.filter((e)=>{return ctr.includes(e)});
        tag.options[i].style.color = `#444`;
        if(contagem.length>0){
            tag.options[i].style.color = ``;
        }
    }
}

function _parametros(foco){
    const _selFiltroGrupo = $('selFiltroGrupo');
    const _selFiltroOperacao = $('selFiltroOperacao');
    const _selFiltroGbmDestino = $('selFiltroGbmDestino');
    const _selFiltroTurno = $('selFiltroTurno');
    const _colecData = document.getElementsByClassName('clsData') ;
    
    let par = {};
    let grupo = '';
    let arrOper = [];
    let arrGbmDestino = [];
    let arrTurno = [];
    let arrData = [];
    
    if(foco == undefined || foco == `grupo`){
        grupo = _selFiltroGrupo.value;
    }
    if(foco == undefined || foco == `operacao`){
        for (let i = 0; i < _selFiltroOperacao.options.length; i++) {
            if(_selFiltroOperacao.options[i].selected){
                arrOper.push(`${_selFiltroOperacao.options[i].value}`)
            }
        }
    }
    if(foco == undefined || foco == `gbm_destino`){
        for (let i = 0; i < _selFiltroGbmDestino.options.length; i++) {
            if(_selFiltroGbmDestino.options[i].selected){
                arrGbmDestino.push(`${_selFiltroGbmDestino.options[i].value}`)
            }
        }
    }
    if(foco == undefined || foco == `turno`){
        for (let i = 0; i < _selFiltroTurno.options.length; i++) {
            if(_selFiltroTurno.options[i].selected){
                arrTurno.push(`${_selFiltroTurno.options[i].value}`)
            }
        }
    }
    if(foco == undefined || foco == `data`){
        for(let i = 0; i < _colecData.length; i++){
            const btnData = _colecData[i];
            if(btnData.ariaPressed=="true"){
                const dia = `${btnData.id.replace('btnData', '')}${$('spnDataAux').innerHTML}`;
                arrData.push(dia);
            }
        }
    }
    
    if(grupo !== '') { par.grupo = grupo}
    if(arrOper.length > 0) { par.operacao = arrOper }
    if(arrGbmDestino.length > 0) { par.gbm_destino = arrGbmDestino }
    if(arrTurno.length > 0){ par.horario = arrTurno }
    if(arrData.length > 0){ par.data = arrData }

    console.debug(JSON.stringify(par));
    return par;
}

function preencherSelect(tag, obj) {
    const arrAux = (Array.isArray(obj) ? obj : Object.keys(obj))
    if(tag.nodeName.toLowerCase() == 'select'){
        if(tag.childElementCount > 0) { _limparSelect(tag) } 
        if(!tag.multiple){tag.append(new Option("(Há opções...)", ""))}
        arrAux.forEach((item)=>{
            tag.append(new Option(item, item ))
        })
    }
}

 function _limparSelect(tag){
    for(let i = tag.length-1; i >= 0; i--){
        tag.removeChild(tag.item(i))
    }
}

function filtrarEscalasJson({ assinatura, data, escaladoPor, falta, grupo, gbm_destino, horario, lotacao, nome, operacao, operacao_tipo, quadro, quinzena, posto_grad, siape, sub_lotacao_local, tempo, cinco }) {
    
    let objAux = dadoEscalasJson.filter((e)=>{return e})

    if (assinatura !== undefined) {
        objAux = objAux.filter((e)=>{return e.ASSINATURA.indexOf(assinatura) > -1})
    }
    if (data !== undefined) {
        if(Array.isArray(data)){
            if(data.length > 0){
                objAux = objAux.filter((e)=>{return data.includes(e.DATA)})
            }
        }else{
            objAux = objAux.filter((e)=>{return data.includes(e.DATA)})
        }
    }
    if (escaladoPor !== undefined) {
        if(escaladoPor === 'compulsoria'){
            objAux = objAux.filter((e)=>{return e.ESCALADO.split('-').length === 3})
        }else if(escaladoPor === 'próprio'){
            objAux = objAux.filter((e)=>{return e.ESCALADO.split('-').length === 2})
        }else{
            objAux = objAux.filter((e)=>{return e.ESCALADO.indexOf(escaladoPor) > -1})
        }
    }
    if (falta !== undefined) {
        objAux = objAux.filter((e)=>{return e.FALTA === falta})
    }
    if (grupo !== undefined) {
        objAux = objAux.filter((e)=>{return e.GRUPO.indexOf(grupo) > -1})
    }
    if (gbm_destino !== undefined) {
        if(Array.isArray(gbm_destino)){
            if(gbm_destino.length > 0){
                objAux = objAux.filter((e)=>{return gbm_destino.includes(e.GBM_DESTINO)})
            }
        }
        else{
            objAux = objAux.filter((e)=>{return e.GBM_DESTINO.indexOf(gbm_destino) > -1})
        }
    }
    if (horario !== undefined) {
        if(Array.isArray(horario)){
            if(horario.length > 0){
                objAux = objAux.filter((e)=>{return horario.includes(e.HORA)})
            }
        }
        else{
            objAux = objAux.filter((e)=>{return e.HORA.indexOf(horario) > -1})
        }
    }
    if (lotacao !== undefined) {
        objAux = objAux.filter((e)=>{return e.LOTAÇÃO.indexOf(lotacao) > -1})
    }
    if (nome !== undefined) {
        objAux = objAux.filter((e)=>{return e.NOME.indexOf(nome) > -1})
    }
    if (operacao !== undefined) {
        if(Array.isArray(operacao)){
            if(operacao.length > 0){
                objAux = objAux.filter((e)=>{return operacao.includes(e.OPERAÇÃO)})
            }
        }
        else{
            objAux = objAux.filter((e)=>{return e.OPERAÇÃO.indexOf(operacao) > -1})
        }
    }
    if (operacao_tipo !== undefined) {
        objAux = objAux.filter((e)=>{return e.name_um.indexOf(operacao_tipo) > -1})
    }
    if (quadro !== undefined) {
        objAux = objAux.filter((e)=>{return e.QUADRO.indexOf(quadro) > -1})
    }
    if (quinzena!==undefined) {
        objAux = objAux.filter((e)=>{return e.QUINZENA.indexOf(quinzena) > -1})
    }
    if (posto_grad!==undefined) {
        objAux = objAux.filter((e)=>{return e.POSTO_GRAD.indexOf(posto_grad) > -1})
    }
    if (sub_lotacao_local!==undefined) {
        objAux = objAux.filter((e)=>{return e.desc_um.indexOf(sub_lotacao_local) > -1})
    }
    if (siape!==undefined) {
        if(siape.substr(0,1) === '-'){
            siape = siape.substr(1,siape.length)
            objAux = objAux.filter((item) => {return item.SIAPE !== siape})
        }else{
            objAux = objAux.filter((e)=>{return e.SIAPE.indexOf(siape) > -1})
        }
    }
    if (tempo!==undefined) {
        tempo = tempo.toString()
        if (tempo.indexOf('12/24') > -1){
            objAux = objAux.filter((e)=>{return e.TEMPO=='12' || e.TEMPO == '24'})
        }else{
            objAux = objAux.filter((e)=>{return e.TEMPO.indexOf(tempo) > -1})
        }
    }
    if (cinco!==undefined) {
        objAux = objAux.filter((e)=>{return e.name_cinco.indexOf(cinco) > -1})
    }
        
    return objAux
}

